#include<stdio.h>
void sort(int c[3][5])//此函数用于将请求以时间顺序排序，若时间相同按楼层由低到高排序。 
{
	int i,j,c0,c1,c2;
	for(i=0;i<4;i++)
	{
		for(j=i+1;j<5;j++)
		{
			if(c[i][0]>c[j][0])
			{	
				c0=c[j][0];
				c1=c[j][1];
				c2=c[j][2];
				c[j][0]=c[i][0];
				c[j][1]=c[i][1];
				c[j][2]=c[i][2];
				c[i][0]=c0;
				c[i][1]=c1;
				c[i][2]=c2; 
			}
			else if(c[i][0]=c[j][0]&&c[i][1]>c[j][1])
			{
				c0=c[j][0];
				c1=c[j][1];
				c2=c[j][2];
				c[j][0]=c[i][0];
				c[j][1]=c[i][1];
				c[j][2]=c[i][2];
				c[i][0]=c0;
				c[i][1]=c1;
				c[i][2]=c2;
			} 
		}
	}
}
int main()
{
	int t[5]={0},a[3][5],sum1=0,sum2=0,sum,t1,t2,floor=1,i,j,T=0;//t[]用于记录等待时间（不包含电梯运行时间） 
	int n,m=0,k=0,x,y;//n为电梯内人数，m为已下电梯人数,k为被搁置请求的人数,x为电梯内要到10层的人数，y为电梯内要到一楼的人数。。
	int b[3][5],status=0;//b[][]用于暂存被搁置的请求,status用于记录电梯运行方向。  
	for(i=0;i<5;i++)
	{
		scanf("%d%d%d",&a[i][0],&a[i][1],&a[i][2]);//输入五组请求。 
	}
	for(i=0;i<5;i++)
	{
		sum1=sum1+10-a[i][1];//运行时间。 
	}
	sort(a);//将各请求按时间顺序排序。
	for(i=0;;)
	{
		if(T==a[i][0])//电梯在T时刻收到请求，根据请求情况讨论。 
		{
			if(floor==a[i][1]&&status==a[i][2])
			{
				if(T==a[i+1][0]&&floor==a[i+1][1])//若电梯在同一时刻，同一楼层还有请求，则暂不运行。由于题目设定，时间不加一。 
				{
					if(status==0)
					{
						x++;
					}
					else
					{
						y++;
					}
					n=x+y;//电梯内人数加一。
					i++;//完成一请求，继续下一请求。 
		        }
				else if(T!=a[i+1][0])//若电梯在此刻没有其它请求 
				{
					printf("%d时,停靠在%d楼",T,floor);
					T++;//电梯在请求楼层停靠。 
					for(j=0;j<=i;j++)
					{
						t[j]++;//电梯内的人等候。 
					} 
					if(status==0)
					{
						x++;
						floor++;
					}
					else
					{
						y++;
						floor--;
					}
					n=x+y;//电梯内人数加一。 
					i++;//完成一请求，继续下一请求。 
				}
				else//若电梯在此刻还有请求但电梯不在请求楼层。 
				{
					printf("%d时,停靠在%d楼",T,floor); 
					for(j=0;j<=i;j++)
					{
						t[j]++;//请求延续到下一时刻。。 
					} 
					if(status==0)
					{
						x++;
						floor++;
					}
					else
					{
						y++;
						floor--;
					}
					n=x+y;//电梯内人数加一
					i++;//完成一请求，继续下一请求。
					for(j=i;j<5;j++) 
					{
						if(a[j][0]==T)
						{
							a[j][0]++;//如果此时刻还有请求，请求延续到下一时刻。 
						}
					}
					T++;//电梯在请求楼层停靠。
				}
			}
			else if(status==0&&floor>a[i][1]&&a[i][2]==0)//电梯超过请求楼层，考虑是否返回。 
			{
				 t1=(n+1)*(floor-a[i][1])+n*(floor-a[i][1]+1);//电梯返回等待时间总和  
				 t2=(k+1)*(10-floor)*2+(k+1)+1;//电梯跳过请求，电梯外的人等待的时间。 
				 if(t1<t2)//判断哪种方式更优。 
				 {
				 	for(j=0;j<=i;j++)
				 	{
				 		t[j]=t[j]+2;//所有人等待。 
					}
					T++;
					a[i][0]++;
					floor--;//电梯回到下一楼层，请求持续到下一时刻。 
				 }
				 else
				 {
				 	T++;
					floor++;
					b[k][1]=a[i][1];
					b[k][2]=a[i][2];//电梯跳过请求,请求的人状态变为等候。
					i++;//电梯继续下一请求。 
					k++;//等待人数加一。 
				 } 
			}
			else if(status==1&&floor>a[i][1]&&a[i][2]==1)//电梯超过请求楼层，考虑是否返回。
			{
				 t1=(n+1)*(a[i][1]-floor)+n*(a[i][1]-floor+1);//电梯返回等待时间总和。  
				 t2=(k+1)*(floor-1)*2+(k+1)+1;//电梯跳过请求，电梯外的人等待的时间。
				 if(t1<t2)//判断哪种方式更优。 
				 {
				 	for(j=0;j<=i;j++)
				 	{
				 		t[j]=t[j]+2;//所有人等待。 
					}
					T++;
					a[i][0]++;
					floor++;//电梯回到上一楼层，请求持续到下一时刻。 
				 }
				 else
				 {
				 	T++;
					floor--;
					b[k][1]=a[i][1];
					b[k][2]=a[i][2];//电梯跳过请求,请求的人状态变为等候。
					i++;//电梯继续下一请求。 
					k++;//等待人数加一。 
				 } 
			}
			else if(status==0&&a[i][2]==1)//如果电梯收到的请求与电梯运行方向不一置，考虑是否响应。 
			{
				t1=x*(floor-1)*2+x+(floor-a[i][1]);//电梯内的人等候电梯往返时间及请求人等候电梯响应的时间。
				t2=(k+1)*(10-floor)*2+(k+1)+1;//请求被搁置的人等待电梯往返的时间。 
				if(t1<t2)
				{
					for(j=0;j<=i;j++)
				 	{
				 		t[j]=t[j]+2;//所有人等待。 
					}
					T++;
					a[i][0]++;
					status=1;//电梯运行方向改变。 
					floor--;//电梯回到下一楼层，请求持续到下一时刻。
				}
				else
				{
					T++;
					floor++;
					b[k][1]=a[i][1];
					b[k][2]=a[i][2];//电梯跳过请求,请求的人状态变为等候。
					i++;//电梯继续下一请求。 
					k++;//等待人数加一。
				}
			}
			else if(status==1&&a[i][2]==0) 
			{
				t1=y*(10-floor)*2+y+a[i][1]-floor;
				t2=(k+1)*(floor-1)*2+(k+1)+1;
				if(t1<t2)
				{
					for(j=0;j<=i;j++)
				 	{
				 		t[j]=t[j]+2;//所有人等待。 
					}
					T++;
					a[i][0]++;
					status=0;//电梯运行方向改变。 
					floor++;//电梯回到上一楼层，请求持续到下一时刻。
				}
				else
				{
					T++;
					floor--;
					b[k][1]=a[i][1];
					b[k][2]=a[i][2];//电梯跳过请求,请求的人状态变为等候。
					i++;//电梯继续下一请求。 
					k++;//等待人数加一。
				} 
			} 
			else if(floor<a[i][1]&&status==0)
			{
				t[i]++;
				T++;
				a[i][0]++;
				floor++;//电梯未到达请求楼层，请求的人等待,请求延续到下一时刻。 
			}
			else if(floor>a[i][1]&&status==1)
			{
				t[i]++;
				T++;
				a[i][0]++;
				floor--;//电梯未到达请求楼层，请求的人等待,请求延续到下一时刻。
			}	
			else//电梯在T时刻未接收到请求，继续运行。 
			{
				T++;
				if(status==0)
				{
					floor++;
				}
				else
				{
					floor--;
				}
			} 
			if((m+n)==5)
			{
				T++; 
				break;//所有人到达目的地，电梯停靠，停止运行。 
			}
			else if(floor==10)
		    {
				T++;
				m=m+x;
				x=0;//电梯到达10楼，乘客下电梯。
			    for(j=0;j<5;j++)
				{
					sum2=sum2+t[j];//累计本轮等待时间。
					t[j]=0;//重置等待时间。 
				}
				if(k>0)
				{
					i=0;
					for(j=0;;j++)
					{
						sort(b);
					    floor=b[0][1];
						T=T+10-b[0][1];//电梯回到最低层。
						a[j][0]=T;//请求持续到T时刻。 
						a[j][1]=b[j][1];
						a[j][2]=b[j][2];//将被搁置的请求重新放入待执行列表。
						t[j]=T-b[j][0];//等待时间为到达十楼时间减发出请求时间加时间。
						if(j==k)
						{
						 k=0;break;	
						}
					}
				}
		    }
		    else if(floor==1)
		    {
				T++;
				m=m+y;
				y=0;//电梯到达1楼，乘客下电梯。
			    for(j=0;j<5;j++)
				{
					sum2=sum2+t[j];//累计本轮等待时间。
					t[j]=0;//重置等待时间。 
				}
				if(k>0)
				{
					i=0;
					for(j=0;;j++)
					{
						sort(b);
					    floor=b[0][1];
						T=T+b[k][1]-1;//电梯回到最高层。
						a[j][0]=T;//请求持续到T时刻。 
						a[j][1]=b[j][1];
						a[j][2]=b[j][2];//将被搁置的请求重新放入待执行列表。
						t[j]=T-b[j][0];//等待时间为到达一楼时间减发出请求时间加时间。
						if(j==k)
						{
						 k=0;break;	
						}
					}
				}
		    }
	    }
    }
	sum=sum1+sum2; 
	printf("%d",sum);
	return 0;
}
